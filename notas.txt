#--------- comandos de uso frencuente
#Para hacer alias de comandos largos
bash
.#Listar namespace"ns"
kubectl get ns
.# listar pod de ns
kubectl get pods -n <ns>
.#Describir pods o ver lo que tiene dentro
k describe pod < namepod > -n <ns>
.#Listar todos con detalles
kubectl get pods -A < namepod > < ns >
.#Reiniciar pod
kubectl rollout restart deployment < namepod "el nombre no debe incluir los numeros finales" > -n ns
Ejemplo: kubectl rollout restart deployment mono -n wabims-pre
#Ingresar a un pod
 kubectl exec -it mono-65f79744d4-r8lhh -n wabims -- sh
//verificar
####
*****Kubernetes ******
#Listar Clusters
kubectl config get-contexts
#Entrar al cluster
kubectl config use-context cgsp1weuakswebcgscomm001-admin
#Listar todos los pods y ns
kubectl get pods -A
#Contar lineas
kubectl get pods -A | wc -l
#Listar nodos
kubectl get node
#describe nodes
kubectl describe node <nombre del contexto>
#Estado de los componentes del cluster
kubectl get componentstatuses
#######Github
#Clonar proyectos
git clone <url>
#Crear rama
git branch
#Ubicarse en nueva rama
git checkup -b <nombrebranch>
#Subir info a la rama
Git push nombrexxxx
#Probar repot
git status

···················································


#------- varios comandos --------
Info General
Instalar docker
	 kubectl
	 Minikube -> "Trabajar local"
sudo usermod -a -G docker <usuario> -> agregar usuario al equipo de docker
apt install terminator tmux wget -> instalar herramientas de ayuda


conexion ssh
ssh srv@192.168.1.139
**Cifrar Base64**
echo -n "postgres" | base64
echo "postgres" | base64 -d


##Docker##
system status docker ->ver estado
docker ps -> ver contenedores activos
docker ps -a  -> todos los estados de los contenedores viejos y nuevos
docker create helloworld:latest -> crear contenedor
docker start <idcontenedor>
       stop  <idcontenedor>

##Minikube##
minikube dashboard --url -> habilitar dashboard

##K8##
kubectl run <name> --image="imagedocker" --port:80 80
kubectl expose pod kbilling --type=LoadBalancer --port=8080 --target-port=80  --> Exponer servicio
kubectl api-versions ->version de la api
kubectl apply -f ./ -> ejecutar los deployment 
kubectl apply -f archivo.yml -> ejecutar los deployment individuales
kubectl delete -f ./ -> elimina lo que esta creado en k8 no los archivos
kubectl get all -> ver todo
minikube ip -> ver ip de cluster
docker build -t <imagendockerhub> --no-cache --buld-arg JAR_FILE=./*.jar .  -> generar imagen java en ruta especifica
docker build -t helloworld:1.0 .     -> lo mismo que el anterior pero con etiqueta
docker tag helloworld:1.0 helloworld:latest -> re-etiquetar
docker tag helloworld:2.0 helloworld:latest -> re-etiquetar para organizar
docker inspect <idcontenedor> -> ver el dockerfile del contenedor

```
- kubectl get node - To list down all worker nodes.
- kubectl delete node <node_name> - Delete the given node in cluster.
- kubectl top node <node-name> - Show metrics for a given node.
- kubectl describe nodes - Describe all the nodes in verbose.
- kubectl get pods -o wide - List all pods in the current namespace, with more details.
- kubectl get node -o wide - List all the nodes with mode details.
- kubectl describe node - Describe the given node in verbose.
- kubectl annotate node <node_name> - Add an annotation for the given node.
- kubectl label node - Add a label to given node
 ````
# Pod
````
- kubectl get pod -  To list the available pods in the default namespace.
- kubectl get pods -o wide - To list the available pods with more details
- kubectl describe pod <pod_name> - To list the detailed description of pod.
- kubectl delete pod <pod_name> - To delete a pod with the name.
- kubectl delete -f pod.yaml - If create pod from file we can use this method
- kubectl create pod <pod_name> - To create a pod with the name.
- Kubectl get pod -n <name_space> - To list all the pods in a namespace.
- Kubectl create pod <pod_name> -n <name_space>  - To create a pod with the name in a namespace.
- kubectl logs <podname> -n namespace - check pod logs in ns
- kubectl expose deployment nginx --port=80 --type=NodePort - Expose PODs as services (creates endpoints)
- kubectl exec -it <pod> - Log into pod
- kubectl get pods --field-selector=status.phase=Running - List all running pods in a namespace
- kubectl get pod <pod-name> —watch - view pod in watch mode
- kubectl get pod -A —watch - view all pod in watch mode
- kubectl get pods -o json - json output
- kubectl get pods —all-namespaces - List all pods in all namespaces
- kubectl get pods -A - List all pods in all namespaces
- kubectl run busybox —image=busybox — sleep 1000 - stop container after 1000ms
- kubectl logs <pod> -c <container> - view container logs in a pod(if have more than one container)
- kubectl top pod <pod> - show metrics for a given pod
- kubectl top pod <pod> —containers - show metrics for a given pod and all its containers
- kubectl explain pod - get the documentation for pod manifests
 ````
# Deployment
````
- kubectl create deployment myngix --image:nginx - To create a new deployment.
- kubectl run mynginx --image=nginx - Create single deployment
- kubectl apply -f [yml-file] - Create deployment
- kubectl get deployment - To list one or more deployments.
- kubectl get deployment [dep-name] --watch - watch a specific deployment
- kubectl get deployment -A - list all deployment 
- kubectl describe deployment [dep-name] - To list a detailed state of one/more deployments.
- kubectl delete deployment [dep-name] - To delete a deployment.
- kubectl set image deployment/nginx nginx=nginx:1.9.1 - Rolling update nginx of deployment
- kubectl scale —replicas=5 deployment/[dep-name] - scale up a deployment
- kubectl autoscale deployment/[dep-name] --min=10 --max=15 --cpu-percent=80
- kubectl rollout undo deployment/[dep-name] - rolling back to previous one
- kubectl rollout undo deployment/[dep-name] --to-revision=2 - rolling back to sepecific one
- kubectl rollout status deployment/[dep-name] - check rollout status
- kubectl rollout history deployment/[dep-name] - Check rollout history
- kubectl edit deployment/myngix - edit deployment with editor
- kubectl port-forward deployment/[pod-name] [localhost-port]:[pod-port] - port forwarding
````
# DeamonSets
````
- kubectl get ds - To list out all the daemon sets.
- kubectl get ds -all-namespaces - To list out the daemon sets in a namespace.
- kubectl describe ds [daemon_name]-n [names_name] - detailed information for a daemon set
````
# Configmaps
````
- kubectl create configmap [map-name] [file-directory] - create configmap
- kubectl describe configmaps [conf-name] - get more details 
- kubectl get configmap - list configmaps
- kubectl get configmap [name] -o yaml - get configmap in YAML
````
# Services
````
- kubectl get services - To list one or more services.
- kubcetl get svc -o wide - To list the available service with more details
- kubectl describe services [svc-name] - To list the detailed display of services.
- kubectl delete service [svc-name] - To delete a particular service.
- kubectl explain service - get the documentation for service manifests
- kubectl port-forward svc/[pod-name] [localhost-port]:[pod-port] - port forwarding
- kubectl create service nodeport [service-name] - creates a Service with subtype NodePort
 ````
# Service Account
````
- kubectl get serviceaccounts [name]- To List Service Accounts.
- kubectl describe serviceaccounts [name] - detailed state of one/more service accounts.
- kubectl replace serviceaccounts [name] - To replace a service account.
- kubectl delete serviceaccounts [name] - To delete a service account.
````
# Secrets
````
- kubectl get secrets - To display the secrets
- kubectl describe secrets/[secret] - describe secret
Create Secrets
- kubectl create secret generic empty-secret
- kubectl get secret empty-secret
````
# Namespace
````
- kubectl create namespace [namesp_name] - To create a namespace by the given name.
- kubectl get namespace - To list the current namespace in a cluster.
- kubectl describe namespace [namesp_name] - display detailed state of one/more namespaces.
- kubectl delete namespace [namesp_name] - To delete a namespace.
- kubectl edit namespace <[namesp_name] - To edit and update the definition of a namespace.
- kubectl create -f namespace.yml - create namespace using yml file
````
# Replicasets
````
- kubectl get replicasets - To List down the ReplicaSets.
- kubectl describe replicasets [replica_name] - list down the detailed state of one/more rs
- kubectl scale - replace=[x] - To scale a replica set.
- kubectl port-forward rs/[pod-name] [localhost-port]:[pod-port] - port forwarding
````
# Volumes
````
- kubectl get pv - Check pv
- kubectl describe pv [pv-name] - Describe pv
- kubectl get pvc - Check PVC
- kubectl describe pv [pv-name] - Describe pvc
````
# Ingress
````
- kubectl get ingress - Commands to manage Ingress for ClusterIP service type
````
# Labels
````
- kubectl get nodes - show-labels - List assigned labels on the node
- kubectl label nodes [node-name] [label] - Add label to node
- kubectl label node [node-name] [label]- - Remove label from a node, same command but you see minus sign with the label name
````
# Events
````
- kubectl get events -A - list events
- kubectl get events -o json - get json output
- kubectl get events | grep [pod-name] - get events from pod
- kubectl describe pod [pod-name] - this also show events
````
# Annotations
````
- kubectl describe deployment/[dep-name] | grep Annotations - get annotations
- kubectl annotate pods [current-ano-name] description='new-description' - update annotations
````
# Taints
````
- kubectl taint [node_name] [taint_name] - used to update the taints on one or more nodes.
````
# Common Metrics Command
````
- kubectl top node [node-name] - Show metrics for a given node.
- kubectl top pod [pod] - show metrics for a given pod
- kubectl top pod [pod] - -containers - show metrics for a given pod and all its containers

````
# Common Logs command
````
- kubectl logs [pod-name] -n namespace - check pod logs in ns
- kubectl logs [pod-name] [container-name] - container logs in a pod(if more than one cont)
- kubectl logs [pod-name] - all-containers - logs from all containers in pod
- kubectl logs - since=1h [pod-name] - get logs from last hour
- kubectl logs - tail-20 [pod-name] - To display the most recent 20 lines of logs.
- kubectl logs [pod-name] pod.log - To save the logs into a file named as pod.log.
- kubectl logs -l my-label=my-value - all-containers - get logs from according to the labels
- kubectl logs deployment/[dep-name] - get logs from deployment
- kubectl logs job/[job-name] - get logs from job
- kubectl logs [pod-name] > my-pod-logs.txt - get logs as a text file
````
######Openshit
#Cargar y descargar estaticos
Acceder al entorno de OpenShift donde se encuentre el proyecto
- Dentro de Openshift, para ver el nombre de los pods del proyecto:
 1) Seleccionar Administrator en vez de Developer
 2) Entrar en Home > Projects y seleccionar el proyecto
 3) Entrar en Workloads > Pods
- Dentro de OpenShift, arriba a la derecha, a la izquierda del nombre de usuario, clicar en la interrogación y seleccionar Command Line Tools. Ahí descargar oc y abrir el enlace Copy login command > Display Token
- Descargar cwrsycn desde https://www.softpedia.com/get/Internet/Servers/Server-Tools/cwRsync.shtml#download
- Coger el archivo "oc.exe" ymeterlo en la carpeta cwrsync
- Desde la carpeta cwrsync lanzar la cmd:
*Muy importante: quitar el proxy de tu configuración para realizar esto
 1) Conectar con el cluster: ejecutar el primer comando que se da en el enlace Copy login command, pero sustituyendo "oc" por "oc.exe"

Nota: Tener en cuenta que se debe verificar el nombre del pod y las rutas de origen destino antes de ejectutar el comando.

2) Copiar los ficheros: ejecutar el comando "oc.exe rsync <pod>:<origen> <destino>"
 Ej en el que cojo la carpeta files del proyecto y la mando a mi máquina dentro de una carpeta llamada PRE: oc.exe rsync drupal-68-6nglm:/var/www/html/web/sites/default/files C:\Users\x979001\Downloads\oc\PRE
*Es probable que veas que no "hace nada", hay que dejarle tiempo, ya que ocupa bastantes MB, luego verás que salen todos cuando finalice



 3) Copiar los ficheros de tu máquina al proyecto: "oc.exe rsync <origen> <pod>:<destino>"
 Ej en el que cojo mi carpeta files de mi máquina en PRE y la envío al proyecto a la carpeta files: oc.exe rsync C:\Users\x979001\Downloads\oc\PRO\files\ drupal-70-9jjrv:/var/www/html/web/sites/default/files
